@book{bruegge2004object,
	title = {Object Oriented Software Engineering Using UML, Patterns, and Java},
	author = {Bruegge, Bernd and Dutoit, Allen H},
	year = {2009},
	publisher = {Prentice Hall}
}

@article{elazharyUncoveringBenefitsChallenges2022,
  title = {Uncovering the {{Benefits}} and {{Challenges}} of {{Continuous Integration Practices}}},
  author = {Elazhary, Omar and Werner, Colin and Li, Ze Shi and Lowlind, Derek and Ernst, Neil A. and Storey, Margaret-Anne},
  date = {2022-07-01},
  journaltitle = {IEEE Transactions on Software Engineering},
  shortjournal = {IIEEE Trans. Software Eng.},
  volume = {48},
  number = {7},
  pages = {2570--2583},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2021.3064953},
  url = {https://ieeexplore.ieee.org/document/9374092/},
  urldate = {2024-04-20},
  abstract = {In 2006, Fowler and Foemmel defined ten core Continuous Integration (CI) practices that could increase the speed of software development feedback cycles and improve software quality. Since then, these practices have been widely adopted by industry and subsequent research has shown they improve software quality. However, there is poor understanding of how organizations implement these practices, of the benefits developers perceive they bring, and of the challenges developers and organizations experience in implementing them. In this article, we discuss a multiple-case study of three small- to medium-sized companies using the recommended suite of ten CI practices. Using interviews and activity log mining, we learned that these practices are broadly implemented but how they are implemented varies depending on their perceived benefits, the context of the project, and the CI tools used by the organization. We also discovered that CI practices can create new constraints on the software process that hurt feedback cycle time. For researchers, we show that how CI is implemented varies, and thus studying CI (for example, using data mining) requires understanding these differences as important context for research studies. For practitioners, our findings reveal in-depth insights on the possible benefits and challenges from using the ten practices, and how project context matters.},
  langid = {english},
  file = {/Users/shuaiwei_yu/Zotero/storage/THPI3WX3/Elazhary et al. - 2022 - Uncovering the Benefits and Challenges of Continuo.pdf}
}

@article{shahinContinuousIntegrationDelivery2017a,
  title = {Continuous {{Integration}}, {{Delivery}} and {{Deployment}}: {{A Systematic Review}} on {{Approaches}}, {{Tools}}, {{Challenges}} and {{Practices}}},
  shorttitle = {Continuous {{Integration}}, {{Delivery}} and {{Deployment}}},
  author = {Shahin, Mojtaba and Ali Babar, Muhammad and Zhu, Liming},
  date = {2017},
  journaltitle = {IEEE Access},
  shortjournal = {IEEE Access},
  volume = {5},
  pages = {3909--3943},
  issn = {2169-3536},
  doi = {10.1109/ACCESS.2017.2685629},
  url = {http://ieeexplore.ieee.org/document/7884954/},
  urldate = {2024-04-20},
  abstract = {Continuous practices, i.e., continuous integration, delivery, and deployment, are the software development industry practices that enable organizations to frequently and reliably release new features and products. With the increasing interest in the literature on continuous practices, it is important to systematically review and synthesize the approaches, tools, challenges, and practices reported for adopting and implementing continuous practices. This paper aimed at systematically reviewing the state of the art of continuous practices to classify approaches and tools, identify challenges and practices in this regard, and identify the gaps for future research. We used the systematic literature review method for reviewing the peerreviewed papers on continuous practices published between 2004 and June 1, 2016. We applied the thematic analysis method for analyzing the data extracted from reviewing 69 papers selected using predefined criteria. We have identified 30 approaches and associated tools, which facilitate the implementation of continuous practices in the following ways: 1) reducing build and test time in continuous integration (CI); 2) increasing visibility and awareness on build and test results in CI; 3) supporting (semi-) automated continuous testing; 4) detecting violations, flaws, and faults in CI; 5) addressing security and scalability issues in deployment pipeline; and 6) improving dependability and reliability of deployment process. We have also determined a list of critical factors, such as testing (effort and time), team awareness and transparency, good design principles, customer, highly skilled and motivated team, application domain, and appropriate infrastructure that should be carefully considered when introducing continuous practices in a given organization. The majority of the reviewed papers were validation (34.7\%) and evaluation (36.2\%) research types. This paper also reveals that continuous practices have been successfully applied to both greenfield and maintenance projects. Continuous practices have become an important area of software engineering research and practice. While the reported approaches, tools, and practices are addressing a wide range of challenges, there are several challenges and gaps, which require future research work for improving the capturing and reporting of contextual information in the studies reporting different aspects of continuous practices; gaining a deep understanding of how software-intensive systems should be (re-) architected to support continuous practices; and addressing the lack of knowledge and tools for engineering processes of designing and running secure deployment pipelines.},
  langid = {english},
  file = {/Users/shuaiwei_yu/Zotero/storage/LAXFQL2X/Shahin et al. - 2017 - Continuous Integration, Delivery and Deployment A.pdf}
}

@inproceedings{kruscheArTEMiSAutomaticAssessment2018d,
  title = {{{ArTEMiS}}: {{An Automatic Assessment Management System}} for {{Interactive Learning}}},
  shorttitle = {{{ArTEMiS}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Krusche, Stephan and Seitz, Andreas},
  date = {2018-02-21},
  pages = {284--289},
  publisher = {ACM},
  location = {Baltimore Maryland USA},
  doi = {10.1145/3159450.3159602},
  url = {https://dl.acm.org/doi/10.1145/3159450.3159602},
  urldate = {2024-04-20},
  abstract = {The increasing number of students in computer science courses leads to high efforts in manual assessment of exercises. Existing assessment systems are not designed for exercises with immediate feedback in large classes. In this paper, we present an AuTomated assEssment Management System for interactive learning.},
  eventtitle = {{{SIGCSE}} '18: {{The}} 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  isbn = {978-1-4503-5103-4},
  langid = {english},
  file = {/Users/shuaiwei_yu/Zotero/storage/PEI7KE96/Krusche and Seitz - 2018 - ArTEMiS An Automatic Assessment Management System.pdf}
}

@article{jandowHadesCIScalableContinuous,
  title = {{{HadesCI}}: {{Towards}} a {{Scalable Continuous Integration System}} for {{Programming Exercise Environments}}},
  author = {Jandow, Robert},
  abstract = {As programming exercise assignments grow in size and complexity, there is a critical need for effective continuous integration (CI) systems to ensure code quality and facilitate early error detection. HadesCI is an innovative project that aims to redefine continuous integration within programming exercise environments. It seeks to address the pressing challenges of scalability, simplicity, and security, which are crucial for both educational purposes and large-scale software development environments.},
  langid = {english},
  file = {/Users/shuaiwei_yu/Zotero/storage/375UDZ5G/Jandow - HadesCI Towards a Scalable Continuous Integration System for Programming Exercise Environments.pdf}
}

@article{bernsteinContainersCloudLXC2014,
  title = {Containers and {{Cloud}}: {{From LXC}} to {{Docker}} to {{Kubernetes}}},
  shorttitle = {Containers and {{Cloud}}},
  author = {Bernstein, David},
  date = {2014-09},
  journaltitle = {IEEE Cloud Computing},
  shortjournal = {IEEE Cloud Comput.},
  volume = {1},
  number = {3},
  pages = {81--84},
  issn = {2325-6095, 2372-2568},
  doi = {10.1109/MCC.2014.51},
  url = {https://ieeexplore.ieee.org/document/7036275/},
  urldate = {2025-03-26},
  langid = {english},
  file = {/Users/shuaiwei_yu/Zotero/storage/QG84Z9WP/Bernstein - 2014 - Containers and Cloud From LXC to Docker to Kubernetes.pdf}
}

@inproceedings{mahboobKubernetesCICD2021,
  title = {A {{Kubernetes CI}}/{{CD Pipeline}} with {{Asylo}} as a {{Trusted Execution Environment Abstraction Framework}}},
  booktitle = {2021 {{IEEE}} 11th {{Annual Computing}} and {{Communication Workshop}} and {{Conference}} ({{CCWC}})},
  author = {Mahboob, Jamal and Coffman, Joel},
  date = {2021-01-27},
  pages = {0529--0535},
  publisher = {IEEE},
  location = {NV, USA},
  doi = {10.1109/CCWC51732.2021.9376148},
  url = {https://ieeexplore.ieee.org/document/9376148/},
  urldate = {2025-03-27},
  abstract = {Modern commercial software development organizations frequently prescribe to a development and deployment pattern for releases known as continuous integration / continuous deployment (CI/CD). Kubernetes, a cluster-based distributed application platform, is often used to implement this pattern. While the abstract concept is fairly well understood, CI/CD implementations vary widely. Resources are scattered across onpremise and cloud-based services, and systems may not be fully automated. Additionally, while a development pipeline may aim to ensure the security of the finished artifact, said artifact may not be protected from outside observers or cloud providers during execution.},
  eventtitle = {2021 {{IEEE}} 11th {{Annual Computing}} and {{Communication Workshop}} and {{Conference}} ({{CCWC}})},
  isbn = {978-1-6654-1490-6},
  langid = {english},
  file = {/Users/shuaiwei_yu/Zotero/storage/EIWW89Q2/Mahboob and Coffman - 2021 - A Kubernetes CICD Pipeline with Asylo as a Trusted Execution Environment Abstraction Framework.pdf}
}

@article{mustyalaCICDPIPELINES,
  title = {{{CI}}/{{CD PIPELINES IN KUBERNETES}}: {{ACCELERATING SOFTWARE DEVELOPMENT AND DEPLOYMENT}}},
  author = {Mustyala, Anirudh},
  abstract = {In the fast-paced world of software development, Continuous Integration and Continuous Deployment (CI/CD) pipelines have become essential tools for accelerating the development and deployment process. Integrating CI/CD pipelines within Kubernetes environments brings a host of benefits, enabling development teams to streamline workflows, improve efficiency, and reduce time-to-market. This integration not only automates the build, test, and deployment stages but also ensures consistency and reliability across applications. By leveraging Kubernetes' robust orchestration capabilities, development teams can manage containerized applications with ease, scale effortlessly, and handle complex deployments seamlessly. This abstract explores the integration of CI/CD pipelines in Kubernetes, highlighting the key advantages such as enhanced collaboration, improved code quality, and faster iteration cycles. It discusses how the synergy between CI/CD and Kubernetes fosters an environment of continuous improvement and agility, allowing organizations to respond swiftly to market demands and deliver high-quality software at a rapid pace. The discussion also touches upon practical aspects, including best practices for setting up CI/CD pipelines in Kubernetes, common challenges faced, and solutions to overcome these hurdles. In essence, this abstract provides a comprehensive overview of how CI/CD pipelines in Kubernetes serve as a catalyst for efficient software development and deployment, ultimately driving innovation and competitive advantage in the digital era.},
  langid = {english},
  file = {/Users/shuaiwei_yu/Zotero/storage/CYCES4M6/Mustyala - CICD PIPELINES IN KUBERNETES ACCELERATING SOFTWARE DEVELOPMENT AND DEPLOYMENT.pdf}
}
